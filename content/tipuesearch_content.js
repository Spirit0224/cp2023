var tipuesearch = {"pages": [{'title': 'About', 'text': ' https://github.com/mdecycu/cmsite  \n \n', 'tags': '', 'url': 'About.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n \n \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n \n', 'tags': '', 'url': 'Brython.html'}, {'title': 'W6', 'text': '// 包含標準輸出入程式庫的標頭文件\n// https://blog.csdn.net/weixin_38468077/article/details/101069365\n// http://www.gnuplot.info/demo/\n// https://github.com/sysprog21/rv32emu\n// https://github.com/sysprog21/semu\n// https://docs.google.com/presentation/d/14N0cWG2SnBSqhc2cLF0_2VerB9FF8JN3\n// https://cs61c.org/fa23/\n// https://greenteapress.com/wp/think-python-2e/\n// https://github.com/ecalvadi/c99-examples\n// https://github.com/gouravthakur39/beginners-C-program-examples\n// https://github.com/ergenekonyigit/Numerical-Analysis-Examples\n// https://www.che.ncku.edu.tw/facultyweb/changct/html/teaching/CPPandMATLAB/Past/pdf%20Files/Chap02-Ling.pdf\n// https://gteceducation.com.sg/Brochures/PROGRAMMING/C%20PROGRAMMING%20FULL.pdf\n// https://jsommers.github.io/cbook/cbook.pdf\n// https://jsommers.github.io/cbook/index.html\n// http://student.itee.uq.edu.au/courses/csse2310/CProgrammingNotes.pdf\n// http://cslibrary.stanford.edu/101/EssentialC.pdf\n// https://publications.gbdirect.co.uk/c_book/\n// https://www.fossil-scm.org/fossil-book/doc/2ndEdition/fossilbook.pdf\n// ***** execute on replit\n// cd downloads\n// cc gnuplot_ex1.c -o gnuplot_ex1\n// ./gnuplot_ex1\n#include <stdio.h>\n\xa0\xa0\n// 主函式\nint main() {\n\xa0\xa0\xa0\xa0// Start a Gnuplot process using popen\n\xa0\xa0\xa0\xa0FILE *gnuplotPipe = popen("gnuplot -persistent", "w");\n\xa0\xa0\xa0\xa0if (!gnuplotPipe) {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0fprintf(stderr, "Failed to start Gnuplot.\\n");\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0return 1;\n\xa0\xa0\xa0\xa0}\n\xa0\xa0\n\xa0\xa0\xa0\xa0// Use Gnuplot plotting commands, specify font and output as PNG\n\xa0\xa0\xa0\xa0fprintf(gnuplotPipe, "set terminal png font \'default,10\' size 800,400\\n");\n\xa0\xa0\xa0\xa0fprintf(gnuplotPipe, "set output \'./../images/gnuplot_ex1.png\'\\n");\n\xa0\xa0\xa0\xa0fprintf(gnuplotPipe, "plot sin(x)");\n\xa0\xa0\xa0\xa0// Close popen\n\xa0\xa0\xa0\xa0pclose(gnuplotPipe);\n\xa0\xa0\n\xa0\xa0\xa0\xa0return 0;\n} \n \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n 檔名： .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n 跑   輸出   清除輸出區 清除繪圖區 重新載入 \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2： \n 1 添加到100 cango_three_gears BSnake的 AI俄羅斯方塊 旋轉塊W \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n', 'tags': '', 'url': 'W6.html'}, {'title': 'W7', 'text': '// https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China\n// cc roc_flag.c -lgd -lm to link with gd and math library\n// https://www.rapidtables.com/web/color/RGB_Color.html\n// 幾何形狀著色與繪圖練習\n// 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖\n#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\xa0\nvoid draw_roc_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue);\n\xa0\nint main() {\n\xa0\xa0\xa0\xa0// wdth 3: height 2\n\xa0\xa0\xa0\xa0int width = 1200;\n\xa0\xa0\xa0\xa0int height = (int)(width*2.0 / 3.0);\n\xa0\n\xa0\xa0\xa0\xa0gdImagePtr img = gdImageCreateTrueColor(width, height);\n\xa0\xa0\xa0\xa0gdImageAlphaBlending(img, 0);\n\xa0\n\xa0\xa0\xa0\xa0draw_roc_flag(img);\n\xa0\n\xa0\xa0\xa0\xa0FILE *outputFile = fopen("./roc_flag.png", "wb");\n\xa0\xa0\xa0\xa0if (outputFile == NULL) {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0fprintf(stderr, "Error opening the output file.\\n");\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0return 1;\n\xa0\xa0\xa0\xa0}\n\xa0\xa0\xa0\xa0gdImagePngEx(img, outputFile, 9);\n\xa0\xa0\xa0\xa0fclose(outputFile);\n\xa0\xa0\xa0\xa0gdImageDestroy(img);\n\xa0\xa0\xa0\xa0return 0;\n}\n\xa0\nvoid draw_roc_flag(gdImagePtr img) {\n\xa0\xa0\xa0\xa0int width = gdImageSX(img);\n\xa0\xa0\xa0\xa0int height = gdImageSY(img);\n\xa0\xa0\xa0\xa0int red, white, blue;\n\xa0\xa0\xa0\xa0int center_x = (int)(width/4);\n\xa0\xa0\xa0\xa0int center_y = (int)(height/4);\n\xa0\xa0\xa0\xa0int sun_radius = (int)(width/8);\n\xa0\n\xa0\xa0\xa0\xa0// Colors for the flag\n\xa0\xa0\xa0\xa0red = gdImageColorAllocate(img, 242, 0, 0); // Red color\n\xa0\xa0\xa0\xa0white = gdImageColorAllocate(img, 255, 255, 255); // White stripes\n\xa0\xa0\xa0\xa0blue = gdImageColorAllocate(img, 0, 41, 204); // Blue\n\xa0\n\xa0\xa0\xa0\xa0// 繪製紅色矩形區域\n\xa0\xa0\xa0\xa0gdImageFilledRectangle(img, 0, 0, width, height, red);\n\xa0\n\xa0\xa0\xa0\xa0// 繪製藍色矩形區域\n\xa0\xa0\xa0\xa0gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);\n\xa0\n\xa0\xa0\xa0\xa0// 繪製太陽\n\xa0\xa0\xa0\xa0draw_white_sun(img, center_x, center_y, sun_radius, white, red, blue);\n}\nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue) {\n\xa0\xa0\xa0\xa0float angle = 0;\n\xa0\xa0\xa0\xa0int numRays = 12; // 光芒的數量\n\xa0\n\xa0\xa0\xa0\xa0gdPoint points[3]; // 三個頂點的陣列\n\xa0\n\xa0\xa0\xa0\xa0for (int i = 0; i < numRays; i++) {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0angle = i * (2 * M_PI / numRays);\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0float x1 = center_x + cos(angle) * sun_radius;\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0float y1 = center_y + sin(angle) * sun_radius;\n\xa0\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0// 調整兩個底邊頂點的位置\n\xa0\xa0\xa0\xa0\xa0\xa0float x2 = center_x + cos(angle + 0.35) * (sun_radius * 0.5);\n\xa0\xa0\xa0\xa0\xa0\xa0float y2 = center_y + sin(angle + 0.35) * (sun_radius * 0.5);\n\xa0\xa0\xa0\xa0\xa0\xa0float x3 = center_x + cos(angle - 0.35) * (sun_radius * 0.5);\n\xa0\xa0\xa0\xa0\xa0\xa0float y3 = center_y + sin(angle - 0.35) * (sun_radius * 0.5);\n\xa0\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0// 設定多邊形的三個頂點\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0points[0].x = (int)x1;\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0points[0].y = (int)y1;\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0points[1].x = (int)x2;\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0points[1].y = (int)y2;\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0points[2].x = (int)x3;\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0points[2].y = (int)y3;\n\xa0\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0gdImageFilledPolygon(img, points, 3, white);\n\xa0\xa0\xa0\xa0}\n\xa0\xa0//外圈\n\xa0\xa0gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.2, sun_radius * 1.2, blue);\n\xa0\n\xa0\xa0\xa0\xa0// 繪製太陽內部\n\xa0\xa0\xa0\xa0gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.1, sun_radius * 1.1, white);\n} \n \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n', 'tags': '', 'url': 'W7.html'}, {'title': 'W8', 'text': '#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\xa0\nvoid draw_usa_flag(gdImagePtr img);\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);\n\xa0\nint main() {\n\xa0\xa0\xa0\xa0int width = 800;\n\xa0\xa0\xa0\xa0int height = (int)(width / 1.9);\n\xa0\n\xa0\xa0\xa0\xa0gdImagePtr img = gdImageCreateTrueColor(width, height);\n\xa0\xa0\xa0\xa0gdImageAlphaBlending(img, 0);\n\xa0\n\xa0\xa0\xa0\xa0draw_usa_flag(img);\n\xa0\n\xa0\xa0\xa0\xa0FILE *outputFile = fopen("./../images/usa_flag.png", "wb");\n\xa0\xa0\xa0\xa0if (outputFile == NULL) {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0fprintf(stderr, "打开输出文件时出错。\\n");\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0return 1;\n\xa0\xa0\xa0\xa0}\n\xa0\n\xa0\xa0\xa0\xa0gdImagePngEx(img, outputFile, 9);\n\xa0\xa0\xa0\xa0fclose(outputFile);\n\xa0\xa0\xa0\xa0gdImageDestroy(img);\n\xa0\n\xa0\xa0\xa0\xa0return 0;\n}\n\xa0\nvoid draw_usa_flag(gdImagePtr img) {\n\xa0\xa0\xa0\xa0int width = gdImageSX(img);\n\xa0\xa0\xa0\xa0int height = gdImageSY(img);\n\xa0\xa0\xa0\xa0int red, white, blue;\n\xa0\xa0\xa0\xa0// 国旗颜色\n\xa0\xa0\xa0\xa0red = gdImageColorAllocate(img, 178, 34, 52); // 红色条纹\n\xa0\xa0\xa0\xa0white = gdImageColorAllocate(img, 255, 255, 255); // 白色条纹\n\xa0\xa0\xa0\xa0blue = gdImageColorAllocate(img, 60, 59, 110); // 蓝色矩形\n\xa0\n\xa0\xa0\xa0\xa0int stripe_height = height / 13;\n\xa0\xa0\xa0\xa0int stripe_width = width;\n\xa0\xa0\xa0\xa0int star_size = (int)(0.0308 * height); // 星星大小\n\xa0\n\xa0\xa0\xa0\xa0for (int y = 0; y < height; y += stripe_height) {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0if (y / stripe_height % 2 == 0) {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red);\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0} else {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white);\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0}\n\xa0\xa0\xa0\xa0}\n\xa0\n\xa0\xa0\xa0\xa0gdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 7, blue);\n\xa0\n\xa0\xa0\xa0\xa0int star_spacing_x = (int)(0.129 * height); // 横向星星之间的间距\n\xa0\xa0\xa0\xa0int star_spacing_y = (int)(0.054 * height); // 纵向星星之间的间距\n\xa0\xa0\xa0\xa0int star_start_x = (int)(0.125 * height); // 星星的起始X位置\n\xa0\xa0\xa0\xa0int star_start_y = (int)(0.0485 * height); // 星星的起始Y位置\n\xa0\n\xa0\xa0\xa0\xa0for (int row = 0; row < 9; row++) {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0int starsPerRow = (row % 2 == 0) ? 6 : 5;\n\xa0\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0// 计算2、4、6和8排星星的偏移量\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0int offset_x = (row % 2 == 0) ? star_spacing_x / -2 : 0;\n\xa0\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0for (int star = 0; star < starsPerRow; star++) {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0int x = star_start_x + star * star_spacing_x + offset_x;\n\xa0\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0// 旋转角度（以弧度为单位）\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0double rotation_angle = M_PI / 5; // 忘記多少度的旋转\n\xa0\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0int y = star_start_y + row * star_spacing_y;\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0draw_star(img, x, y, star_size, white, rotation_angle);\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0}\n\xa0\xa0\xa0\xa0}\n}\n\xa0\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {\n\xa0\xa0\xa0\xa0gdPoint points[10];\n\xa0\n\xa0\xa0\xa0\xa0for (int i = 0; i < 10; i++) {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0double angle = M_PI / 2 + i * 2 * M_PI / 10 + rotation_angle;\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0int radius = (i % 2 == 0) ? size : size / 2;\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0points[i].x = x + radius * cos(angle);\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0points[i].y = y + radius * sin(angle);\n\xa0\xa0\xa0\xa0}\n\xa0\n\xa0\xa0\xa0\xa0// 用指定的颜色填充星星\n\xa0\xa0\xa0\xa0gdImageFilledPolygon(img, points, 10, color);\n} \n \n', 'tags': '', 'url': 'W8.html'}, {'title': 'W9', 'text': '\n \n \n \n \n \n \n \n \n \n \n \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\xa0\nvoid draw_japan_flag(gdImagePtr img);\nvoid draw_red_sun(gdImagePtr img, int x, int y, int size, int color);\n\xa0\nint main() {\n\xa0\xa0\xa0\xa0int originalWidth = 1200;\n\xa0\xa0\xa0\xa0int originalHeight = (int)(originalWidth * 2.0 / 3.0);\n\xa0\xa0\xa0\xa0gdImagePtr img = gdImageCreateTrueColor(originalWidth, originalHeight);\n\xa0\xa0\xa0\xa0gdImageAlphaBlending(img, 0);\n\xa0\n\xa0\xa0\xa0\xa0draw_japan_flag(img);\n\xa0\n\xa0\xa0\xa0\xa0// 新的宽度和高度以适应 "images" 文件夹\n\xa0\xa0\xa0\xa0int newWidth = 600;\n\xa0\xa0\xa0\xa0int newHeight = (int)(newWidth * 2.0 / 3.0);\n\xa0\n\xa0\xa0\xa0\xa0// 创建新图像并进行缩放\n\xa0\xa0\xa0\xa0gdImagePtr resizedImage = gdImageCreateTrueColor(newWidth, newHeight);\n\xa0\xa0\xa0\xa0gdImageAlphaBlending(resizedImage, 0);\n\xa0\xa0\xa0\xa0gdImageCopyResampled(resizedImage, img, 0, 0, 0, 0, newWidth, newHeight, originalWidth, originalHeight);\n\xa0\n\xa0\xa0FILE *outputFile = fopen("./../images/japan_flag.png", "wb");\n\xa0\xa0\xa0\xa0if (outputFile == NULL) {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0fprintf(stderr, "Error opening the output file.\\n");\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0return 1;\n\xa0\xa0\xa0\xa0}\n\xa0\xa0\xa0\xa0gdImagePng(resizedImage, outputFile);\n\xa0\xa0\xa0\xa0fclose(outputFile);\n\xa0\xa0\xa0\xa0gdImageDestroy(img);\n\xa0\xa0\xa0\xa0gdImageDestroy(resizedImage);\n\xa0\n\xa0\xa0\xa0\xa0return 0;\n}\n\xa0\nvoid draw_japan_flag(gdImagePtr img) {\n\xa0\xa0\xa0\xa0int width = gdImageSX(img);\n\xa0\xa0\xa0\xa0int height = gdImageSY(img);\n\xa0\n\xa0\xa0\xa0\xa0// 创建一个白色背景\n\xa0\xa0\xa0\xa0int white = gdImageColorAllocate(img, 255, 255, 255);\n\xa0\xa0\xa0\xa0gdImageFilledRectangle(img, 0, 0, width - 1, height - 1, white);\n\xa0\n\xa0\xa0\xa0\xa0// 绘制红色圆圈（太阳）\n\xa0\xa0\xa0\xa0int red = gdImageColorAllocate(img, 255, 0, 0);\n\xa0\xa0\xa0\xa0int center_x = width / 2;\n\xa0\xa0\xa0\xa0int center_y = height / 2;\n\xa0\xa0\xa0\xa0int radius = (int)((width * 2) / 3);\n\xa0\xa0\xa0\xa0draw_red_sun(img, center_x, center_y, radius, red);\n}\n\xa0\nvoid draw_red_sun(gdImagePtr img, int x, int y, int size, int color) {\n\xa0\xa0// 減小 size 的值,例如將他的值減半\n\xa0\xa0size = size / 2;\n\xa0\xa0\xa0\xa0gdImageArc(img, x, y, size, size, 0, 360, color);\n\xa0\xa0\xa0\xa0gdImageFillToBorder(img, x, y, color, color);\n} \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'W9.html'}, {'title': 'W10', 'text': '#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\xa0\nvoid draw_proc_flag(gdImagePtr img);\n\xa0\nint main() {\n\xa0\xa0\xa0\xa0int width = 300; // 國旗寬度\n\xa0\xa0\xa0\xa0int height = 200; // 國旗高度\n\xa0\n\n\n\xa0\xa0\xa0\xa0gdImagePtr im = gdImageCreateTrueColor(width, height);\n\xa0\xa0\xa0\xa0gdImageAlphaBlending(im, 0);\n\xa0\n\xa0\xa0\xa0\xa0draw_proc_flag(im);\n\xa0\n\xa0\xa0\xa0\xa0FILE *outputFile = fopen("./../images/proc_flag.png", "wb");\n\xa0\xa0\xa0\xa0if (outputFile == NULL) {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0fprintf(stderr, "打開輸出檔案時出錯。\\n");\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0return 1;\n\xa0\xa0\xa0\xa0}\n\xa0\n\xa0\xa0\xa0\xa0gdImagePngEx(im, outputFile, 9);\n\xa0\xa0\xa0\xa0fclose(outputFile);\n\xa0\xa0\xa0\xa0gdImageDestroy(im);\n\xa0\n\xa0\xa0\xa0\xa0return 0;\n}\n\xa0\n// 聲明 draw_star 函數\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);\n\xa0\nvoid draw_proc_flag(gdImagePtr img) {\n\xa0\xa0\xa0\xa0int width = gdImageSX(img);\n\xa0\xa0\xa0\xa0int height = gdImageSY(img);\n\xa0\xa0\xa0\xa0int red, yellow;\n\xa0\n\xa0\xa0\xa0\xa0// 國旗顏色\n\xa0\xa0\xa0\xa0red = gdImageColorAllocate(img, 255, 0, 0); // 紅色背景\n\xa0\xa0\xa0\xa0yellow = gdImageColorAllocate(img, 255, 255, 0); // 黃色星星\n\xa0\n\xa0\xa0\xa0\xa0// 畫紅色背景\n\xa0\xa0\xa0\xa0gdImageFilledRectangle(img, 0, 0, width, height, red);\n\xa0\n\xa0\xa0\xa0\xa0// 設置星星的大小和位置\n\xa0\xa0\xa0\xa0int star_size = (int)(0.28 * height);\n\xa0\xa0\xa0\xa0int star_x = (int)(0.165 * width);\n\xa0\xa0\xa0\xa0int star_y = (int)(0.265 * height);\n\xa0\n\xa0\xa0\xa0\xa0// 畫大星星\n\xa0\xa0\xa0\xa0draw_star(img, star_x, star_y, star_size, yellow, 11.0);\n\xa0\n\xa0\xa0\xa0\xa0// 繪製小星星，位置根據實際國旗比例計算\n\xa0\xa0\xa0\xa0double radius = 0.15 * height;\n\xa0\xa0\xa0\xa0double angle = 360 / 7 * M_PI / 179.0;\n\xa0\xa0\xa0\xa0double rotation = -M_PI / 7.5;\n\xa0\xa0\xa0\xa0int cx = (int)(0.32 * width);\n\xa0\xa0\xa0\xa0int cy = (int)(0.27 * height);\n\xa0\n\xa0\xa0\xa0\xa0for (int i = -1; i < 3; i++) {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0int x = (int)(cx + radius * cos(i * angle + rotation));\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0int y = (int)(cy + radius * sin(i * angle + rotation));\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0draw_star(img, x, y, 19, yellow, M_PI / 5.0);\n\xa0\xa0\xa0\xa0}\n}\n\xa0\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {\n\xa0\xa0\xa0\xa0gdPoint points[10];\n\xa0\n\xa0\xa0\xa0\xa0// 計算星形的五個外點和五個內點\n\xa0\xa0\xa0\xa0double outer_radius = size / 2;\n\xa0\xa0\xa0\xa0double inner_radius = size / 6;\n\xa0\xa0\xa0\xa0double angle = M_PI / 5.0;\n\xa0\n\xa0\xa0\xa0\xa0for (int i = 0; i < 10; i++) {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0double radius = (i % 2 == 0) ? outer_radius : inner_radius;\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0double theta = rotation_angle + i * angle;\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0points[i].x = x + radius * cos(theta);\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0points[i].y = y + radius * sin(theta);\n\xa0\xa0\xa0\xa0}\n\xa0\n\xa0\xa0\xa0\xa0// 使用 gdImageFilledPolygon 繪製星形\n\xa0\xa0\xa0\xa0gdImageFilledPolygon(img, points, 10, color);\n} \n \n \n \n \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'W10.html'}, {'title': 'W13', 'text': '這學期的計算機程式學了倉儲的運用及Python跟C語言的簡單用法,這學期還用到了用C語言繪製國旗。讓我知道程式語言不單僅僅是寫程式還可以繪製圖片。學習程式對於我們未來工作很有幫助。我們得CNC也要用到程式。所以我們必須讓機械與繪圖與程式結合。 \n \n \n', 'tags': '', 'url': 'W13.html'}]};